**¿Cuál de las siguientes opciones refleja correctamente el patrón GRASP 'Creator'?** {
~%100% Una clase A debería ser responsable de crear instancias de la clase B si A contiene, agrupa o utiliza estrechamente a B.
~%0% Una clase debe crear cualquier objeto que no tenga dependencias externas, sin importar su relación.
~%0% El patrón Creator indica que una clase debe crear únicamente objetos abstractos para mantener bajo acoplamiento.
~%0% Una interfaz debe encargarse de la creación de todas las instancias en lugar de las clases concretas.
}

**¿Qué patrón GRASP se está aplicando cuando asignamos una responsabilidad a la clase que posee la información necesaria para cumplirla?** {
~%100% Information Expert
~%0% Controller
~%0% Low Coupling
~%0% Indirection
}

**¿Cuál es el objetivo principal del patrón GRASP 'Low Coupling'?** {
~%100% Reducir las dependencias entre clases para facilitar el mantenimiento y la evolución del sistema.
~%0% Aumentar la cantidad de clases para distribuir mejor las responsabilidades.
~%0% Permitir que múltiples clases accedan libremente a los datos compartidos del sistema.
~%0% Garantizar que todas las clases implementen una interfaz común para facilitar la herencia.
}

**¿Qué patrón GRASP se utiliza para mantener el diseño resistente a cambios en partes específicas del sistema?** {
~%100% Protected Variations
~%0% Polymorphism
~%0% Pure Fabrication
~%0% Creator
}

**¿Cuál de los siguientes ejemplos representa correctamente el patrón GRASP 'Controller'?** {
~%100% Una clase `SistemaVentas` que recibe la solicitud de 'realizar venta' desde la interfaz de usuario y coordina la operación.
~%0% Una clase `Producto` que imprime sus propios detalles en pantalla cuando se le solicita desde la UI.
~%0% Una clase `Factura` que se encarga de almacenar y recuperar datos directamente desde la base de datos.
~%0% Una clase `LíneaDePedido` que decide si una venta debe ser aprobada o no según reglas del negocio.
}

**¿Cuál es el propósito del patrón GRASP 'Pure Fabrication'?** {
~%100% Introducir una clase ficticia que no representa un concepto del dominio, con el fin de mejorar la cohesión o reducir el acoplamiento.
~%0% Delegar tareas a clases que tengan la información necesaria para cumplirlas eficientemente.
~%0% Controlar el acceso de los usuarios a los métodos públicos mediante herencia múltiple.
~%0% Simplificar la comunicación entre subsistemas utilizando una única interfaz unificada.
}

**¿Cuál es el beneficio principal de aplicar el patrón GRASP 'High Cohesion' en el diseño de clases?** {
~%100% Mantener las clases enfocadas en tareas relacionadas, facilitando su comprensión, mantenimiento y reutilización.
~%0% Aumentar la cantidad de métodos públicos para mejorar la accesibilidad entre objetos.
~%0% Delegar toda la lógica de negocio a una única clase centralizada que controle el flujo general del sistema.
~%0% Reducir la cantidad de clases necesarias agrupando múltiples responsabilidades en una sola.
}

**¿Cuál de los siguientes patrones GRASP se basa en el uso de la herencia para manejar comportamientos que varían según el tipo de objeto?** {
~%100% Polymorphism
~%0% Protected Variations
~%0% Indirection
~%0% Information Expert
}

**¿Cuál de los siguientes enunciados describe mejor la relación entre los patrones GRASP 'Low Coupling' y 'High Cohesion'?** {
~%100% Ambos son principios fundamentales que buscan mejorar la calidad del diseño\\: el primero reduce dependencias entre clases y el segundo mantiene clases enfocadas y bien organizadas.
~%0% Se excluyen mutuamente, ya que una alta cohesión implica acoplamiento fuerte entre clases.
~%0% Son sinónimos\\: ambos significan que las clases deben tener pocas responsabilidades.
~%0% Low Coupling se refiere al uso de interfaces, mientras que High Cohesion se aplica únicamente a herencia múltiple.
}

**¿Qué patrón GRASP se estaría violando si una clase tiene demasiadas responsabilidades y realiza tareas que no están directamente relacionadas entre sí?** {
~%100% High Cohesion
~%0% Controller
~%0% Indirection
~%0% Creator
}

**¿Cuál es el rol del patrón GRASP 'Indirection' en el diseño orientado a objetos?** {
~%100% Introducir un intermediario que desacople dos clases que no deberían conocerse directamente.
~%0% Asignar la responsabilidad a la clase que tiene los datos necesarios para realizar una tarea.
~%0% Seleccionar una clase artificial que aumente la cohesión del sistema.
~%0% Determinar qué clase debe instanciar objetos de otra clase según su relación de uso.
}

**¿Qué patrón GRASP estás aplicando si decides crear una clase adicional que no pertenece al dominio, pero mejora el diseño separando responsabilidades técnicas como el acceso a datos?** {
~%100% Pure Fabrication
~%0% Information Expert
~%0% Protected Variations
~%0% Polymorphism
}

**Según los principios GRASP, ¿qué patrón se recomienda usar para decidir qué clase debería ser responsable de crear instancias de otra clase?** {
~%100% Creator
~%0% Controller
~%0% Pure Fabrication
~%0% Protected Variations
}

**¿Qué representa el acrónimo GRASP en el contexto del diseño orientado a objetos?** {
~%100% General Responsibility Assignment Software Patterns
~%0% Generic Rules for Abstract Software Programming
~%0% Global Resource Allocation Strategy Principles
~%0% Guided Rules for Automated Software Planning
}

¿Cuál de las siguientes opciones describe correctamente el **Patrón Observer** y su propósito principal en el diseño de software? {
~%100% Define una dependencia *uno-a-muchos* entre objetos para que, cuando uno cambia de estado, todos sus observadores sean notificados y actualizados automáticamente, permitiendo bajo acoplamiento.
~%0% Encapsula una solicitud como objeto, separando al invocador del receptor para soportar acciones como undo/redo y encolamiento de comandos.
~%0% Proporciona una interfaz unificada para acceder a múltiples subsistemas complejos y reducir el acoplamiento entre el cliente y esos subsistemas.
~%0% Permite construir objetos complejos paso a paso, separando la lógica de creación de la lógica de representación y encapsulando cada paso en un director.
~%0% Permite cambiar el comportamiento de un objeto en tiempo de ejecución mediante la selección dinámica de una estrategia encapsulada.
}

En una implementación del patrón **Observer**, ¿cuál de las siguientes afirmaciones es correcta respecto a la relación entre el Sujeto y sus Observadores? {
~%100% El Sujeto mantiene una lista de observadores y les notifica automáticamente cuando cambia su estado, sin conocer los detalles de implementación de cada observador.
~%0% Los observadores controlan directamente el estado del sujeto para asegurar que se actualice cuando lo necesiten.
~%0% El patrón Observer requiere que el sujeto y los observadores estén fuertemente acoplados para asegurar consistencia en los datos.
~%0% Cada observador mantiene su propia copia del estado del sujeto y no depende de notificaciones.
}

¿Cuál de las siguientes situaciones representa correctamente el uso del patrón **Observer** en el contexto de eventos en JavaScript? {
~%100% Un botón del DOM registra múltiples funciones mediante `addEventListener('click', ...)`, y cada una se ejecuta automáticamente cuando el usuario hace clic, sin que el botón conozca la lógica interna de esas funciones.
~%0% Una función accede directamente al botón del DOM y le asigna un único `onclick`, reemplazando cualquier otro manejador existente.
~%0% Una clase en JavaScript almacena su propio estado y lo imprime directamente en la consola, sin permitir que otros objetos reaccionen a sus cambios.
~%0% Un controlador de eventos llama directamente a cada función registrada por nombre, manteniendo referencias explícitas dentro del botón.
}

Si tengo un botón en una interfaz gráfica y quiero que, al hacer clic sobre él, se ejecuten múltiples acciones como registrar la hora, actualizar un contador y mostrar un mensaje, todo sin que el botón conozca directamente la lógica de cada acción, ¿qué patrón de diseño es el más adecuado para implementar esta solución? {
~%100% Observer.
~%0% Command.
~%0% Strategy.
~%0% Decorator.
~%0% Singleton.
}

Supongamos que en una aplicación tengo un botón 'Enviar', y quiero que al hacer clic se realicen varias acciones simultáneamente\\: guardar el formulario, enviar una notificación por correo y registrar la acción en un log, todo sin que el botón tenga que saber cuántas acciones existen ni cómo se implementan. ¿Qué patrón de diseño debería usar para lograr esto de forma flexible y desacoplada? {
~%100% Observer.
~%0% Fachada.
~%0% Template Method.
~%0% Builder.
~%0% Proxy.
}

Un sistema financiero necesita que, cuando se apruebe una transacción, varios módulos reaccionen al mismo tiempo\\: uno debe actualizar el balance, otro debe enviar una confirmación al cliente, y otro debe auditar el evento. ¿Qué patrón de diseño es el más adecuado para manejar esta situación? {
~%100% Observer
~%0% Chain of Responsibility
~%0% Builder
~%0% Adapter
~%0% Template Method
}

En una aplicación de chat, cada vez que un usuario escribe un mensaje, este debe ser mostrado en pantalla, almacenado en el historial y enviado por red a los demás participantes. ¿Qué patrón de diseño deberías aplicar para que estas acciones ocurran automáticamente cada vez que se emite un nuevo mensaje, sin acoplarlas directamente al componente que lo genera? {
~%100% Observer
~%0% Mediator
~%0% Proxy
~%0% Decorator
~%0% Factory Method
}

**Estás desarrollando una aplicación de geolocalización para una empresa de logística. Necesitás acceder a un servicio externo que convierte direcciones en coordenadas GPS, pero este servicio requiere autenticación con token y tiene un límite de llamadas por minuto. Además, debe haber una sola instancia que maneje este acceso durante toda la ejecución de la aplicación. ¿Qué patrón de diseño deberías aplicar para implementar correctamente este componente?** {
~%100% Singleton
~%0% Factory Method
~%0% Strategy
~%0% Observer
~%0% Command
}

**Estás desarrollando un sistema de reportes para una empresa. Todos los reportes deben seguir el mismo formato\\: encabezado institucional, cuerpo del reporte con datos específicos (ventas, inventario, etc.), y un pie de página con la fecha y firma. Cada tipo de reporte tiene diferencias únicamente en el cuerpo. ¿Qué patrón de diseño aplicarías para estructurar esta solución de forma reutilizable y evitar duplicar el formato común?** {
~%100% Template Method
~%0% Decorator
~%0% Builder
~%0% Adapter
~%0% Proxy
}

**Estás desarrollando un sistema de monitoreo en una planta industrial. Necesitás que haya un componente central que registre todos los eventos críticos (alertas, errores, logs) provenientes de distintos sensores distribuidos. Este componente debe ser único en toda la aplicación y accesible globalmente desde múltiples módulos. ¿Qué patrón deberías aplicar para asegurar una única instancia centralizada de este registrador?** {
~%100% Singleton
~%0% Observer
~%0% Chain of Responsibility
~%0% Facade
~%0% Command
}

**Estás desarrollando una aplicación que permite configurar parámetros globales del sistema (como idioma, zona horaria, moneda y formato de fecha). Estos valores deben poder leerse desde cualquier parte de la aplicación, pero deben mantenerse consistentes\\: si cambian, el cambio debe reflejarse globalmente sin crear copias independientes. ¿Qué patrón deberías aplicar para implementar este gestor de configuración?** {
~%100% Singleton
~%0% Strategy
~%0% Factory Method
~%0% Builder
~%0% Template Method
}

**Estás integrando un módulo de pagos en una aplicación moderna que utiliza la interfaz `IPagoElectronico` con el método `Pagar(decimal monto)`. Sin embargo, el sistema heredado de la empresa solo expone una clase `ProcesadorCheque` con el método `ProcesarCheque(decimal cantidad)`, y no puede modificarse. Necesitás que el sistema moderno pueda utilizar este procesador antiguo sin cambiar su forma de invocar pagos. ¿Qué patrón deberías aplicar para resolver este problema de integración?** {
~%100% Adapter
~%0% Decorator
~%0% Proxy
~%0% Fachada
~%0% Builder
}

**Una empresa adopta un nuevo sistema de reportes que espera comunicarse con componentes que implementen una interfaz unificada. Sin embargo, uno de los módulos más importantes sigue utilizando una interfaz antigua con nombres y estructuras completamente distintas, y no puede ser modificado porque es software legado certificado. Necesitás que ambos sistemas funcionen juntos sin reescribir el módulo viejo. ¿Qué patrón deberías aplicar para resolver esta situación?** {
~%100% Adapter
~%0% Proxy
~%0% Composite
~%0% Strategy
~%0% Observer
}

**Estás desarrollando una aplicación de gestión de transporte donde, dependiendo del tipo de cliente (individual, empresa o transporte pesado), deben generarse distintos tipos de vehículos con comportamientos específicos. Querés que el código cliente no tenga que preocuparse por qué clase instanciar, solo indicar el tipo. ¿Qué patrón aplicarías para crear los objetos de forma flexible y desacoplada?** {
~%100% Factory Method
~%0% Builder
~%0% Singleton
~%0% Template Method
~%0% Prototype
}

**Estás desarrollando una aplicación que genera distintos tipos de documentos según el contexto\\: facturas, presupuestos y recibos. Cada tipo tiene su propia lógica interna, pero el resto del sistema solo necesita “pedir un documento” según el tipo y trabajar con él de forma uniforme. Querés centralizar la creación y evitar que el resto del código use `new` o conozca las clases concretas. ¿Qué patrón deberías aplicar?** {
~%100% Factory Method
~%0% Prototype
~%0% Command
~%0% Decorator
~%0% Strategy
}

**Una aplicación permite enviar mensajes a través de distintos canales\\: email, SMS o notificaciones push. Cada tipo de mensaje requiere un objeto distinto que sabe cómo enviarse. El sistema principal solo debería indicar el tipo de mensaje y recibir un objeto ya listo para usar, sin preocuparse por qué clase concreta se necesita. ¿Qué patrón de diseño deberías aplicar para resolver esto?** {
~%100% Factory Method
~%0% Observer
~%0% Facade
~%0% Chain of Responsibility
~%0% Singleton
}

**Estás desarrollando una aplicación de ventas que debe aplicar distintos tipos de descuento según la categoría del cliente\\: uno puede tener un porcentaje variable, otro un monto fijo, y otro no tener ningún descuento. Querés permitir cambiar el tipo de descuento de forma flexible en tiempo de ejecución sin modificar el resto del sistema. ¿Qué patrón deberías aplicar?** {
~%100% Strategy
~%0% Template Method
~%0% Factory Method
~%0% Observer
~%0% Builder
}

**Estás creando una herramienta de exportación de datos. Según la preferencia del usuario, los datos deben exportarse en formato CSV, JSON o XML. La lógica de exportación para cada formato es distinta, pero la interfaz de usuario no debería cambiar cuando se elige uno u otro. Querés que el sistema pueda soportar fácilmente nuevos formatos en el futuro sin modificar el código principal. ¿Qué patrón aplicarías para resolver este problema?** {
~%100% Strategy
~%0% Factory Method
~%0% Template Method
~%0% Observer
~%0% Command
}

**Estás desarrollando una aplicación para cafeterías donde los clientes pueden personalizar su bebida base agregando ingredientes como leche, azúcar, crema, o jarabe. Cada combinación posible debe calcular su costo total y mostrarse con su descripción completa, pero no querés crear una subclase distinta por cada variante. ¿Qué patrón deberías aplicar para resolver esto de manera flexible y reutilizable?** {
~%100% Decorator
~%0% Builder
~%0% Composite
~%0% Prototype
~%0% Strategy
}

**Estás desarrollando un editor de texto donde los usuarios pueden aplicar múltiples formatos a un fragmento\\: negrita, cursiva, subrayado, color, etc. Estos estilos pueden combinarse en cualquier orden y cantidad, y deben aplicarse sin alterar la lógica principal del texto. ¿Qué patrón deberías usar para permitir esta composición flexible de funcionalidades sobre el mismo contenido?** {
~%100% Decorator
~%0% Composite
~%0% Strategy
~%0% Command
~%0% Facade
}

**Estás implementando un sistema de envío de notificaciones. Existe una funcionalidad básica que envía un mensaje, pero según la configuración del usuario, ese mismo mensaje puede ser registrado en un log, encriptado, o reenviado a múltiples destinos. Necesitás una solución que permita agregar estas funcionalidades de forma combinable, sin modificar el código original del envío. ¿Qué patrón deberías aplicar?** {
~%100% Decorator
~%0% Observer
~%0% Command
~%0% Proxy
~%0% State
}

**Estás desarrollando una aplicación para controlar dispositivos del hogar desde una consola central. Cada botón del panel puede ejecutar acciones como encender la luz, abrir la puerta del garaje o bajar la persiana. Querés que estas acciones puedan asignarse dinámicamente, y que eventualmente se puedan deshacer o repetir. ¿Qué patrón deberías aplicar para encapsular estas operaciones como objetos reutilizables?** {
~%100% Command
~%0% Observer
~%0% Mediator
~%0% Strategy
~%0% Proxy
}

**Estás implementando un editor gráfico que permite a los usuarios realizar acciones como mover, rotar y escalar objetos en pantalla. Además, necesitás agregar funcionalidades como deshacer/rehacer y almacenar secuencias de acciones para repetirlas más tarde. Querés encapsular cada operación para poder gestionarlas de forma flexible. ¿Qué patrón deberías aplicar?** {
~%100% Command
~%0% State
~%0% Template Method
~%0% Observer
~%0% Builder
}

**Estás desarrollando un sistema de procesamiento de pedidos donde distintas acciones deben ejecutarse en cadena\\: validar stock, aplicar descuentos, generar factura y enviar confirmación. Estas acciones pueden variar de un pedido a otro, según condiciones comerciales, y necesitás poder registrarlas, ejecutarlas en orden, e incluso reordenarlas o repetirlas. ¿Qué patrón aplicarías para encapsular cada una de estas acciones como unidades independientes y flexibles?** {
~%100% Command
~%0% Chain of Responsibility
~%0% Strategy
~%0% Observer
~%0% Template Method
}

**Estás desarrollando una aplicación para configurar vehículos personalizados. Un vehículo puede construirse con múltiples opciones\\: tipo de chasis, motor, cantidad de ruedas, accesorios y pintura. Dependiendo del tipo de cliente, algunos pasos pueden omitirse o variar, pero todos deben seguir un proceso coherente de armado. Querés separar el proceso de construcción del resultado final. ¿Qué patrón deberías aplicar para lograr esto?** {
~%100% Builder
~%0% Factory Method
~%0% Prototype
~%0% Decorator
~%0% Abstract Factory
}

**Estás desarrollando un sistema que genera reportes PDF complejos. Algunos reportes incluyen portada, índice, tablas de datos, gráficos y apéndices, pero no todos usan todos los elementos. La estructura general del documento es conocida, pero cada tipo de reporte necesita construir secciones específicas en distinto orden o con diferente formato. ¿Qué patrón aplicarías para permitir construir estos reportes de forma flexible y reutilizable?** {
~%100% Builder
~%0% Template Method
~%0% Strategy
~%0% Factory Method
~%0% Composite
}

**Estás desarrollando un sistema de validación de formularios donde cada campo puede tener múltiples reglas\\: longitud mínima, formato de correo, valores requeridos, etc. Querés que cada regla se aplique en orden y, si una falla, se detenga el proceso. También querés poder agregar, quitar o reordenar reglas fácilmente sin modificar el validador principal. ¿Qué patrón deberías aplicar para estructurar esta lógica?** {
~%100% Chain of Responsibility
~%0% Strategy
~%0% Template Method
~%0% Command
~%0% Observer
}

**Estás construyendo un sistema de atención al cliente donde una solicitud puede ser resuelta por distintos niveles de soporte\\: básico, avanzado o experto. Cada nivel debe evaluar si puede manejar la solicitud; si no, debe pasarla al siguiente. Querés que el cliente no sepa quién va a resolver su caso, y que el flujo de evaluación se pueda cambiar fácilmente. ¿Qué patrón deberías aplicar?** {
~%100% Chain of Responsibility
~%0% Mediator
~%0% Observer
~%0% Strategy
~%0% Decorator
}

**Estás desarrollando un sistema de autorización para operaciones bancarias. Una solicitud debe ser evaluada por diferentes responsables\\: primero un sistema automático, luego un supervisor, y por último un gerente. Cada uno debe decidir si autoriza o pasa la decisión al siguiente. Querés que esta cadena de evaluación sea fácilmente configurable y extensible sin modificar cada clase. ¿Qué patrón deberías usar?** {
~%100% Chain of Responsibility
~%0% Command
~%0% State
~%0% Observer
~%0% Proxy
}

**Estás desarrollando una aplicación que permite gestionar productos en una tienda. Querés mantener separada la lógica de presentación (cómo se muestran los productos), la lógica de negocio (cómo se calculan precios o descuentos), y el control de flujo (cómo responde el sistema a las acciones del usuario como 'Agregar' o 'Eliminar producto'). ¿Qué patrón deberías aplicar para organizar estas responsabilidades de forma clara y desacoplada?** {
~%100% Model–View–Controller (MVC)
~%0% Template Method
~%0% Command
~%0% Observer
~%0% Builder
}

**¿Cuál de los siguientes componentes en el patrón MVC es responsable de recibir las acciones del usuario y coordinar la actualización del modelo y la vista?** {
~%100% Controlador
~%0% Modelo
~%0% Vista
~%0% Repositorio
~%0% Servicio
}

**En una implementación bien estructurada de MVC, ¿cuál de los siguientes elementos debería contener la lógica para acceder y modificar los datos?** {
~%100% Modelo
~%0% Vista
~%0% Controlador
~%0% Plantilla
~%0% Control de sesión
}

**En el patrón MVC, cuando el usuario realiza una acción (como hacer clic en un botón), ¿cuál es el flujo correcto de interacción entre los componentes?** {
~%100% La vista notifica al controlador, el controlador actualiza el modelo, y luego la vista se actualiza con los nuevos datos.
~%0% El controlador actualiza directamente la vista, que luego modifica el modelo según lo necesario.
~%0% La vista consulta al modelo y toma decisiones sobre qué datos mostrar y cómo procesarlos.
~%0% El modelo informa al controlador qué cambios hacer en la vista.
~%0% El modelo recibe directamente las entradas del usuario y redibuja la vista sin intervención del controlador.
}

